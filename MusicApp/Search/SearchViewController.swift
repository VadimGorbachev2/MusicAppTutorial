//
//  SearchViewController.swift
//  MusicApp
//
//  Created by Vadim  Gorbachev on 18.11.2019.
//  Copyright (c) 2019 Vadim  Gorbachev. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SearchDisplayLogic: class
{
  func displaySomething(viewModel: Search.Something.ViewModel)
}

class SearchViewController: UIViewController, SearchDisplayLogic
{
    @IBOutlet weak var table: UITableView!
    var interactor: SearchBusinessLogic?
    var router: (NSObjectProtocol & SearchRoutingLogic & SearchDataPassing)?
    let searchController = UISearchController(searchResultsController: nil)
    private let cellId = "cellId"
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = SearchInteractor()
    let presenter = SearchPresenter()
    let router = SearchRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    doSomething()
    setupSearchBar()
    setupTableView()
    setup()
  
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func doSomething()
  {
    let request = Search.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: Search.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
  }
    
    
// MARK: my functions
  private func setupSearchBar() {
    navigationItem.searchController = searchController
    navigationItem.hidesSearchBarWhenScrolling = true
    searchController.searchBar.delegate = self
  }
    // registration of cell
  private func setupTableView() {
    table.register(UITableViewCell.self, forCellReuseIdentifier: cellId)
  }
    
}

// MARK: UITableViewDelegate and UITableViewDataSource

extension SearchViewController: UITableViewDelegate, UITableViewDataSource {
   
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return 3
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = table.dequeueReusableCell(withIdentifier: cellId, for: indexPath)
        cell.textLabel?.text = "cell number \(indexPath)"
        return cell
    }

}

extension SearchViewController: UISearchBarDelegate {
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String ) {
        print(searchText)
    }
}
